var url = require("url");
var queryString = require("querystring");

// add system specific behavior to the standard `http.ServerRequest` object.
exports.decorate = function(request) {
	
	var mIsDispatched = false;
	var mParams = [];
	var mUrlParts = url.parse(request.url);
	var mGetParams;
	var mPostBody;
	var mPostParams;
	
	if (request.method.toUpperCase() == 'POST') {
		retreivePostBody(function(content) {
			mPostBody = content;
			mPostParams = queryString.parse(mPostBody);
		});
	}
	
	/**
	 * A mark used by the dispatcher to tell if the system i done with handling it.
	 * @param {Boolean} value
	 */
	request.setDispatched = function(value) {
		mIsDispatched = value;
	};	
	
	request.isDispatched = function() {
		return mIsDispatched;
	};
	
	/**
	 * additional parameters that will be sent to the controllers action method under execution.
	 * @param {Array} params
	 */
	request.setParams = function(params) {
		mParams = params;
	};
	
	request.getParams = function(params) {
		return mParams;
	};
	
	/**
	 * Retreive GET data by key. If no key present the whole map is returned.
	 * @param {String} key
	 * @return {Mixed}
	 */
	request.get = function(key, defaultValue) {
		if (!mGetParams) {
			mGetParams = queryString.parse(mUrlParts.query);
		}
		if (!key) {
			return mGetParams;
		}
		
		return mGET[key] || defaultValue;
	};
	
	/**
	 * Retreive POST data by key. If no key present the whole map is returned.
	 * @param {String} key
	 * @return {Mixed}
	 */
	request.post = function(key, defaultValue) {
		if (!mPostParams) { 
			return defaultValue;
		}
		if (!key) {
			return mPostParams;
		}
		
		return mPostParams[key] || defaultValue;
	};
	
	request.client = function(key, defaultValue) {
		
	};
	
	request.cookie = function(key, defaultValue) {
		
	};
	
	request.session = function(key, defaultValue) {
		
	};
	
	function retreivePostBody(callback) {
		var buffer = "";
		
		request.on("data", function(chunk) {
			buffer += chunk;
		});
		request.on("end", function() {
			callback(buffer);	
		});
	}
	
	return request;
};