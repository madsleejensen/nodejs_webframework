var Step = require("step");
var Path = require("contentcube/path");
var FileSystem = require("fs");

module.exports = function PluginBroker(application) {
	var instance = {};
	var mPlugins = {};
	
	instance.get = function(name) {
		return mPlugins[name] || null;
	}
	
	instance.add = function(name, plugin) {
		if (typeof plugin.register == 'function') {
			mPlugins[name] = plugin;
			plugin.register();
		}
	};
	
	/**
	 * Recursively register all plugins located inside the folder path passed in.
	 * @param {String} folderPath -absolute path to the folder.
	 * @param {Function} callback   
	 */
	instance.addPath = function(folderPath, callback) {
		Step(
			function findPlugins() {
				FileSystem.readdir(folderPath, this);
			},
			function registerPlugins(error, files) {
				if (error) throw error;
				var onFilesHandled = this;
				
				function registerLoop() {
					if (files.length <= 0) {
						return onFilesHandled();
					}
					
					var filename = files.shift();
					var filepath = Path.join(folderPath, filename);
				
					Step(
						function validate() {
							FileSystem.stat(filepath, this);
						},
						function instantiate(error, file) {
							if (error) throw error;
							if (!file.isFile()) {
								return this();
							}
							
							var creator = require(filepath);
							var plugin = creator(application);
							var name = Path.basename(filepath, '.js');
							
							instance.add(name, plugin);
						
							registerLoop();
						}
					);
				}
				
				registerLoop();
			},
			function finished(error) {
				if (callback) {
					callback(error);
				}
			}
		);
	};
	
	instance.remove = function(plugin) {
		for (var index in mPlugins) {
			if (mPlugins[index] == plugin) {
				plugin.unregister();
				mPlugins[index] = null;
			}
		}
	};
	
	instance.removeAll = function() {
		for (var index in mPlugins) {
			var plugin = mPlugins[index];
			plugin.unregister();
		}
		
		mPlugins = {};
	};
	
	return instance;
}