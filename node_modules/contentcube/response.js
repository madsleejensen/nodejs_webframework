var Cookie = require("contentcube/cookie");

exports.decorate = function(response) {
	/**
	 * take control over the output, this allows us to build a buffer up and erase it under certain conditions.
	 */
	var outputBuffer = "";
	var cookies = {};
	var mContentType = 'text/html';
	var overridden = {
		write: response.write,
		end: response.end
	};
	
	/**
	 * Store a chunk of content into the output buffer
	 * @param {String} chunk
	 */
	response.write = function(chunk) {
		outputBuffer += chunk;
	};
	
	response.clear = function() {
		outputBuffer = '';
	};
	
	/**
	 * write out the output buffer to the actual response.
	 * @param {String} chunk
	 */
	response.end = function(chunk) {
		if (chunk) {
			response.write(chunk);
		}
		
		outputCookies();
		
		response.writeHead(response.statusCode, {
			'Content-Length': outputBuffer.length,
			'Content-Type': mContentType +'; charset=UTF8'
		});
		
		overridden.write.call(response, outputBuffer);
		overridden.end.call(response);
	};
	
	response.setRedirect = function(url) {
		response.clear();
		response.statusCode = 301;
		response.setHeader('Location', url);
	};
	
	response.setContentType = function(contentType) {
		mContentType = contentType;
	};
	
	/**
	 * Queue up a cookie to be sent back in the response. If cookie name already exists
	 * the new will overwrite the existing.
	 * 
	 * @param {String} name
	 * @param {String} value
	 * @param {Integer} lifetime -in seconds
	 * @param {String} domain
	 * @param {String} path
	 */
	response.setCookie = function(name, value, lifetime, domain, path) {
		cookies[name] = Cookie.encodeSetCookieHeader(name, value, lifetime, domain, path);	
	};
	
	/**
	 * @param {String} name
	 * @param {String} domain
	 * @param {String} path
	 */
	response.removeCookie = function(name, domain, path) {
		cookies[name] = Cookie.encodeSetCookieHeader(name, "", -1, domain, path);		
	};
	
	function outputCookies() {	
		var cookieBuffer = [];
		
		// if already a cookie has been set using the response.setHeader() instead of response.setCookie()
		// if any conflict cookies set by setCookie() will be used.
		var existingCookies = response.getHeader('Set-Cookie');
		if (existingCookies) {
			if (existingCookies.constructor !== Array) {
				existingCookies = [existingCookies];
			}
			
			existingCookies.forEach(function(rawCookie) {
				var parsedCookie = Cookie.parseSetCookieString(rawCookie);
				if (!cookies[parsedCookie.name]) {
					cookies[parsedCookie.name] = rawCookie;
				}
			});
		}
		
		for (var cookieName in cookies) {
			cookieBuffer.push(cookies[cookieName]);
		}
		
		if (cookieBuffer.length > 0) {		
			response.setHeader("Set-Cookie", cookieBuffer);
		}
	}
	
	return response;
};