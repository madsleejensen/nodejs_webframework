var path = require("path");
var fileSystem = require("fs");
var ejs = require("ejs");
var Step = require("step");

module.exports = function(application, request, response) {
	var instance = {
		layout: application.getConfig('layout.defaultLayout')
	};
	
	/**
	 * Request the controller to carry out an action.
	 * The action is most likely determined thru the `contentcube/router`
	 * @param {String} action
	 * @param {Function} callback
	 */
	instance.handle = function(action, callback) {
		action += 'Action';
		var instance = this;
		
		Step(
			function preDispatch() {
				if (typeof instance['preDispatch'] == 'function') {
					return instance['preDispatch'].apply(this);
				}
				
				this();
			},
			function executeAction(error) {
				if (error) throw error;
				
				if (typeof instance[action] == 'undefined') { 
					var error = new Error("Controller does not support action: " + action);
						error.type = "ERROR_NO_ACTION_FOUND";
						error.family = "contentcube";
						error.code = 404;
						
					throw error;
				}
				
				instance[action].apply(this, request.getParams());
			},
			function postDispatch(error) {
				if (error) throw error;
				
				if (typeof instance['postDispatch'] == 'function') {
					return instance['postDispatch'].apply(this);
				}				
				
				this();
			},
			function notifyComplete(error) {
				callback(error);
			}
		)
	};
	
	/**
	 * Forwards to another controller / action to carry out the request.
	 * @param {String} controller
	 * @param {String} action
	 * @param {Function} callback 
	 */
	instance.forward = function(controller, action, callback) {
		request.setDispatched(false);
		request.controllerName = controller;
		request.actionName = action;
		callback();
	};
	
	/** 
	 * Sends a HTTP 301 redirect response.
	 * @param {String} url
	 */
	instance.redirect = function(url) {
		response.setRedirect(url);
		callback();
	};
	
	/**
	 * @param {String} viewName 
	 * @param {Object} viewData -object map used for EJS `locals` rendering property.
	 */
	instance.renderView = function(viewName, viewData, callback) {
		
		if (path.extname(viewName) == '') {
			viewName += ".ejs";
		}
		
		var filepath = path.resolve('./application/views/' + viewName);
		
		if (path.exists(filepath, function(exists) {
			if (!exists) {
				var error = new Error("Cannot find view file for view: " + viewName + " in " + filepath);
					error.type = "ERROR_NO_VIEW_FOUND";
					error.family = "contentcube";
					
				return callback(error);
			}	
			
			fileSystem.readFile(filepath, 'utf8', function(error, data) {
				if (error) {
					return callback(error);
				}
				
				var content = ejs.render(data, {
					locals: viewData
				});
				
				response.write(content);
				
				callback(null, content);
			});
		}));
	};
	
	/**
	 * Two-step view rendering, first render the view file then wrap the content into a layout template. 
	 * The layout template file is defined as the property `layout` on the instance.
	 * @param {String} viewName 
	 * @param {Object} viewData -object map used for EJS `locals` rendering property.
	 */
	instance.renderViewWithLayout = function(viewName, viewData, callback) {
		Step(
			function renderView() {
				instance.renderView(viewName, viewData, this);
			},
			function renderLayout(error, content) {
				if (error) {
					return callback(error);
				}
				
				response.clear(); // clear current buffer;
				
				var layoutData = {
					content: content
				};
				
				instance.renderView(instance.layout, layoutData, callback);
			}
		);
	};
	
	return instance;
};