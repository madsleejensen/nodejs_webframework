/*
 * Date Format 1.2.3
 * (c) 2007-2009 Steven Levithan <stevenlevithan.com>
 * MIT license
 *
 * Includes enhancements by Scott Trenda <scott.trenda.net>
 * and Kris Kowal <cixar.com/~kris.kowal/>
 *
 * Accepts a date, a mask, or a date and a mask.
 * Returns a formatted version of the given date.
 * The date defaults to the current date/time.
 * The mask defaults to dateFormat.masks.default.
 */

var dateFormat = function () {
	var	token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,
		timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
		timezoneClip = /[^-+\dA-Z]/g,
		pad = function (val, len) {
			val = String(val);
			len = len || 2;
			while (val.length < len) val = "0" + val;
			return val;
		};

	// Regexes and supporting functions are cached through closure
	return function (date, mask, utc) {
		var dF = dateFormat;

		// You can't provide utc if you skip other args (use the "UTC:" mask prefix)
		if (arguments.length == 1 && Object.prototype.toString.call(date) == "[object String]" && !/\d/.test(date)) {
			mask = date;
			date = undefined;
		}

		// Passing date through Date applies Date.parse, if necessary
		date = date ? new Date(date) : new Date;
		if (isNaN(date)) throw SyntaxError("invalid date");

		mask = String(dF.masks[mask] || mask || dF.masks["default"]);

		// Allow setting the utc argument via the mask
		if (mask.slice(0, 4) == "UTC:") {
			mask = mask.slice(4);
			utc = true;
		}

		var	_ = utc ? "getUTC" : "get",
			d = date[_ + "Date"](),
			D = date[_ + "Day"](),
			m = date[_ + "Month"](),
			y = date[_ + "FullYear"](),
			H = date[_ + "Hours"](),
			M = date[_ + "Minutes"](),
			s = date[_ + "Seconds"](),
			L = date[_ + "Milliseconds"](),
			o = utc ? 0 : date.getTimezoneOffset(),
			flags = {
				d:    d,
				dd:   pad(d),
				ddd:  dF.i18n.dayNames[D],
				dddd: dF.i18n.dayNames[D + 7],
				m:    m + 1,
				mm:   pad(m + 1),
				mmm:  dF.i18n.monthNames[m],
				mmmm: dF.i18n.monthNames[m + 12],
				yy:   String(y).slice(2),
				yyyy: y,
				h:    H % 12 || 12,
				hh:   pad(H % 12 || 12),
				H:    H,
				HH:   pad(H),
				M:    M,
				MM:   pad(M),
				s:    s,
				ss:   pad(s),
				l:    pad(L, 3),
				L:    pad(L > 99 ? Math.round(L / 10) : L),
				t:    H < 12 ? "a"  : "p",
				tt:   H < 12 ? "am" : "pm",
				T:    H < 12 ? "A"  : "P",
				TT:   H < 12 ? "AM" : "PM",
				Z:    utc ? "UTC" : (String(date).match(timezone) || [""]).pop().replace(timezoneClip, ""),
				o:    (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
				S:    ["th", "st", "nd", "rd"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]
			};

		return mask.replace(token, function ($0) {
			return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
		});
	};
}();

// Some common format strings
dateFormat.masks = {
	"default":      "ddd mmm dd yyyy HH:MM:ss",
	shortDate:      "m/d/yy",
	mediumDate:     "mmm d, yyyy",
	longDate:       "mmmm d, yyyy",
	fullDate:       "dddd, mmmm d, yyyy",
	shortTime:      "h:MM TT",
	mediumTime:     "h:MM:ss TT",
	longTime:       "h:MM:ss TT Z",
	isoDate:        "yyyy-mm-dd",
	isoTime:        "HH:MM:ss",
	isoDateTime:    "yyyy-mm-dd'T'HH:MM:ss",
	isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"
};

// Internationalization strings
dateFormat.i18n = {
	dayNames: [
		"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat",
		"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
	],
	monthNames: [
		"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
		"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
	]
};

// For convenience...
Date.prototype.format = function (mask, utc) {
	return dateFormat(this, mask, utc);
};

exports.format = dateFormat;


/*
exports.dateFormat = function(date, format) {
	var days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
	var months = ['January', 'Febuary', 'March', 'April', 'June', 'July', 'September', 'October', 'November', 'December'];
	
	var map = {
		'd': function(date) { // Day of the month, 2 digits with leading zeros	01 to 31
			var dayOfMonth = date.getDate();
			if (dayOfMonth.length < 2) {
				dayOfMonth = '0' + dayOfMonth;
			}
			return dayOfMonth;
		},
		'D': function(date) { // A textual representation of a day, three letters	Mon through Sun
			return days[date.getDay()].substr(0, 3);
		},
		'j': function(date) { // Day of the month without leading zeros	1 to 31
			return date.getDate();
		},
		'l': function(date) { // A full textual representation of the day of the week	Sunday through Saturday
			return days[date.getDay()];
		},
		'N': function(date) { // ISO-8601 numeric representation of the day of the week (added in PHP 5.1.0)	1 (for Monday) through 7 (for Sunday)
			return date.getDay() + 1;
		},
		'S': function(date) { // English ordinal suffix for the day of the month, 2 characters	st, nd, rd or th. Works well with j
			
		},
		'w': function(date) {
			return date.getDay();
		},
		'W': function(date) { // ISO-8601 week number of year, weeks starting on Monday (added in PHP 4.1.0)	Example: 42 (the 42nd week in the year)
			// http://techblog.procurios.nl/k/n618/news/view/33796/14863/Calculate-ISO-8601-week-and-year-in-javascript.html
			var target = new Date(date.valueOf());
			var dayNr = (this.getDay() + 6) % 7;
			target.setDate(target.getDate() - dayNr + 3);
			var jan4 = new Date(target.getFullYear(), 0, 4);
			var dayDiff = (target - jan4) / 86400000;
			var weekNr = 1 + Math.ceil(dayDiff / 7);
			return weekNr;
		},
		'F': function(date) { // A full textual representation of a month, such as January or March	January through December
			return months[date.getMonth()];
		},
		'm': function(date) { // Numeric representation of a month, with leading zeros	01 through 12
			var month = date.getMonth() + 1;
			if (month.length < 2) {
				month = '0' + month;
			}
			return month;
		},
		'M': function(date) { // A short textual representation of a month, three letters	Jan through Dec
			return map['F'](date).substr(0, 3);
		},
		'n': function(date) { // Numeric representation of a month, without leading zeros	1 through 12
			return date.getMonth() + 1;
		},
		't': function(date) { // Number of days in the given month	28 through 31
			var monthDate = new Date(date.getFullYear(), date.getMonth(), 0);
			return monthDate.getDate();
		},
		'L': function(date) { // Whether it's a leap year	1 if it is a leap year, 0 otherwise.
			// http://www.adp-gmbh.ch/web/js/date/is_leap_year.html
			return new Date(date.getFullYear(), 1, 29).getDate() == 29;
		},
		'o': function(date) { // ISO-8601 year number. This has the same value as Y, except that if the ISO week number (W) belongs to the previous or next year, that year is used instead. (added in PHP 5.1.0)	Examples: 1999 or 2003
			return date.getFullYear();
		},
		'Y': function(date) { // A full numeric representation of a year, 4 digits	Examples: 1999 or 2003
			return date.getFullYear();
		},
		'y': function(date) { // A two digit representation of a year	Examples: 99 or 03
			return date.getFullYear().substr(2, 2);
		},
		'a': function(date) { // Lowercase Ante meridiem and Post meridiem	am or pm
			var hours = date.getHours();
			return hours > 11 ? 'pm' : 'am';
		},
		'A': function(date) { // Uppercase Ante meridiem and Post meridiem	AM or PM
			return map['a'](date).toUpperCase();
		},
		'B': function(date) { // Swatch Internet time
			var H = date.getUTCHours() * 36e2;
			var i = date.getUTCMinutes() * 60;
			var s = date.getUTCSeconds();
			return Math.floor((H + i + s + 36e2) / 86.4) % 1e3;
		},
		'g': function(date) { // 12-hour format of an hour without leading zeros	1 through 12
			var hours = date.getHours();
			hours = hours % 12;
			return hours || 12;
		},
		'G': function(date) { // 24-hour format of an hour without leading zeros	0 through 23
			return date.getHours();
		},
		'h': function(date) { // 12-hour format of an hour with leading zeros	01 through 12
			var hours = date.getHours();
			if (hours.length < 2) {
				hours = '0' + hours.toString();
			}
			return hours;
		},
		'H': function(date) { // 24-hour format of an hour with leading zeros	00 through 23
			var hours = date.getHours();
			if (hours.length < 2) {
				hours = '0' + hours.toString();
			}
			return hours;
		},
		'i': function(date) {
			var minutes = date.getMinutes();
			if (minutes.length < 2) {
				minutes = '0' + minutes.toString();
			}
			return minutes;
		},
		's': function(date) {
			var seconds = date.getSeconds();
			if (seconds.length < 2) {
				seconds = '0' + seconds.toString();
			}
			return seconds;
		},
		'u': function(date) {
			return date.getMilliseconds();
		}
	};
};
*/
