var url = require("url");
var utils = require("contentcube/utils");

module.exports = function(application) {
	var instance = {};
	
	instance.route = function(request, callback) {
		var parts = url.parse(request.url);
		var uri = normalizeUri(parts.pathname);
		var segments = getUriSegments(uri);
		var controllerName = application.getConfig('routing.defaultControllerName');
		var actionName = application.getConfig('routing.defaultActionName');
		var routeByConfiguration = matchConfigurationRoute(uri);
		
		if (routeByConfiguration) {
			segments.splice(0, 2);
			controllerName = routeByConfiguration.controllerName;
			actionName = routeByConfiguration.actionName;
		}
		// route by standard `:controller/:action/:params` convention.
		else { 
			if (segments.length > 0) {
				controllerName = segments.shift();
			}

			if (segments.length > 0) {
				actionName = segments.shift();
				
				// convert actions names like "hello-world-you-rock" into camelcase "helloWorldYouRock" 
			    // which action names should be formatted in.
				if (actionName.indexOf("-") != -1) {
					var nameChunks = actionName.split("-");
					var actionName = nameChunks.shift();
					
					nameChunks.forEach(function(chunk) {
						actionName += utils.ucfirst(chunk);
					});
				};
			}
		}
		
		// rest of segments are used for params.
		if (segments.length > 0) { 
			request.setParams(segments);
		}

		request.controllerName = controllerName;
		request.actionName = actionName;

		callback();
	};
	
	/**
	 * Configuration files can specify routes that vary from the standard `:controller/:action` convention.
	 * @see config/configuration_file.js
	 * @param {String} uri
	 * @return {Object} - or null if no match.
	 */ 
	function matchConfigurationRoute(uri) {
		var routes = application.getConfig('routing.routes', []);
		var sorted = []; 
		
		for (var pattern in routes) {
			sorted.push({
				pattern: pattern,
				config: routes[pattern]
			});
		}
		// sort routes so the longest aka. the most specific route will be used.
		sorted.sort(function(a, b) {
			if (a.pattern.length > b.pattern.length) {
				return -1;
			}
			if (a.pattern.length < b.pattern.length) {
				return 1;
			}
			return 0;
		});
		
		for (var index in sorted) {
			var route = sorted[index];
			var pattern = "^" + normalizeUri(route.pattern);
			var regexp = new RegExp(pattern, 'g');
			
			if (regexp.test(uri)) {
				return route.config;
			}
		}
	}
	
	function getUriSegments(uri) {
		var segments = [];
		
		if (uri.length != 0) {
			segments = uri.indexOf("/") != -1 ? uri.split('/') : [uri];
		}
		
		return segments;
	}
	
	function normalizeUri(uri) {
		return utils.trim(uri, '/');
	}
	
	return instance;
};