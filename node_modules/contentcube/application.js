var Http = require("http");
var Step = require("step");
var Path = require("path");
var FileSystem = require("fs");
var SocketIO = require("socket.io");
var Config = require("contentcube/config");
var CreateRouter = require("contentcube/router");
var CreateDispatcher = require("contentcube/dispatcher");
var RequestDecorator = require("contentcube/request");
var ResponseDecorator = require("contentcube/response");
var Emitter = require("contentcube/emitter");
var Mongolian = require("mongolian");

module.exports = function Application(localPath) {
	var mRouter;
	var mDispatcher;
	var mDatabase;
	var mStaticContentProvider;
	var instance = {
		emitter: Emitter.createNew(),
		config: null,
		plugins: {}
	};
	
	/**
	 * Recursively register all plugins located inside the folder path passed in.
	 * @param {String} folderPath -absolute path to the folder.
	 * @param {Function} callback   
	 */
	instance.registerPlugins = function(folderPath, callback) {
		Step(
			function findPlugins() {
				FileSystem.readdir(folderPath, this);
			},
			function registerPlugins(error, files) {
				if (error) throw error;
				var onFilesHandled = this;
				
				function registerLoop() {
					if (files.length <= 0) {
						return onFilesHandled();
					}
					
					var filename = files.shift();
					var filepath = Path.join(folderPath, filename);
				
					Step(
						function validate() {
							FileSystem.stat(filepath, this);
						},
						function instantiate(error, file) {
							if (error) throw error;
							if (!file.isFile()) {
								return this();
							}
							
							var creator = require(filepath);
							var plugin = creator(application);
							var name = Path.basename(filepath, '.js');
							
							instance.plugins[name] = plugin;
							plugin.register();
						
							registerLoop();
						}
					);
				}
				
				registerLoop();
			},
			function finished(error) {
				if (callback) {
					callback(error);
				}
			}
		);
	};
	
	/**
	 * Lazy loader for a mongolian singleton instance.
	 * @return {mongolian}
	 */
	instance.getDatabase = function() {
		if (!mDatabase) {
			var connection = instance.config.get('mongodb.host') + ':' + instance.config.get('mongodb.port');
			var databaseServer = new Mongolian(connection);
			
			mDatabase = databaseServer.db(instance.config.get('mongodb.database'));
		}
		
		return mDatabase;
	};
	
	function onHttpRequestReceived(request, response) {
		request = RequestDecorator.decorate(request);
		
		var message = request.method + ": " + request.url;
		var logger = request.getLogger();
		logger.log(message);
		
		Step(
			// handle request by serving static content.
			function handleStaticContentRequest() {
				if (!instance.config.get('system.serveStaticContent', false)) {
					return this();
				}
				
				mStaticContentProvider(instance, request, response, this);
			},
			// handle request thru a framework process.
			function handleFrameworkRequest(error, isHandled) {
				if (error) throw error;
				if (isHandled) return this();
				
				response = ResponseDecorator.decorate(response);

				function handleRequest() {
					Step(
						function route() {
							var onRouteCompleted = this;
							Step(
								function before() {
									instance.emitter.emit("routing:before", [request, response], this);
								},
								function doRouting(error) {
									if (error) throw error;
									mRouter.route(request, this);
								},
								function after(error) {
									if (error) throw error;
									instance.emitter.emit("routing:after", [request, response], onRouteCompleted);
								}
							);
						},
						function dispatch(error) {
							if (error) throw error;
							var onDispatchingCompleted = this;
							
							Step(
								function before() {
									instance.emitter.emit("dispatch_loop:before", [request, response], this);
								},
								function doDispatching(error) {
									if (error) throw error;
									mDispatcher.dispatch(request, response, this);
								},
								function after(error) {
									if (error) throw error;
									instance.emitter.emit("dispatch_loop:after", [request, response], onDispatchingCompleted);
								}
							);
						},
						function sendResponse(error) {
							if (error) {
								logger.error(error);
								response.write(error.message);
							}

							response.end();
							this();
						}
					);
				}

				// wait for all request data to be received. 
				// so post data / files are avaible when handling the request.
				if (!request.isDataReceived()) { 
					request.on("request:data_received", function() {	
						handleRequest();
					});
				}
				else {
					handleRequest();
				}
			}
		);
	}
	
	Step(
		function initialize() {
			instance.config = Config(Path.join(localPath, "application/config/production"));
			mRouter = CreateRouter(instance);
			mDispatcher = CreateDispatcher(instance);
			mStaticContentProvider = require("contentcube/static-content-provider");
			instance.httpServer = Http.createServer(onHttpRequestReceived);
			
			if (instance.config.get('system.webSocketsEnabled', false)) {
				instance.socketIO = SocketIO.listen(instance.httpServer);
				//instance.socketIO.set('log', false);
			}
			
			instance.config.set('system.localPath', localPath);
			this();
		},
		function startServer(error) {
			if (error) throw error;
			instance.httpServer.listen(8123);
		}
	);
	
	return instance;
};