var Http = require("http");
var Step = require("step");
var Path = require("path");
var SocketIO = require("socket.io");
var Config = require("contentcube/config");
var Router = require("contentcube/router");
var Dispatcher = require("contentcube/dispatcher");
var StaticProvider = require("contentcube/static-content-provider");
var RequestDecorator = require("contentcube/request");
var ResponseDecorator = require("contentcube/response");
var PluginBroker = require("contentcube/plugins/broker");
var Emitter = require("contentcube/emitter");
var Bootstrap = require("contentcube/bootstrap");

module.exports = function Application(localPath) {
	var mRouter;
	var mDispatcher;
	var mStaticContentProvider;
	var instance = {
		emitter: Emitter.createNew(),
		config: null,
		socketIO: null,
		plugins: null
	};
	
	function onHttpRequestReceived(request, response) {
		request = RequestDecorator.decorate(request);
		
		var message = request.method + ": " + request.url;
		var logger = request.getLogger();
		logger.log(message);
		
		Step(
			// handle request by serving static content.
			function handleStaticContentRequest() {
				if (!instance.config.get('system.serveStaticContent', false)) {
					return this();
				}
				
				mStaticContentProvider.handle(request, response, this);
			},
			// handle request thru a framework process.
			function handleFrameworkRequest(error, isHandled) {
				if (error) throw error;
				if (isHandled) return this();
				
				response = ResponseDecorator.decorate(response);

				function handleRequest() {
					Step(
						function route() {
							var onRouteCompleted = this;
							Step(
								function before() {
									instance.emitter.emit("routing:before", [request, response], this);
								},
								function doRouting(error) {
									if (error) throw error;
									mRouter.route(request, this);
								},
								function after(error) {
									if (error) throw error;
									instance.emitter.emit("routing:after", [request, response], onRouteCompleted);
								}
							);
						},
						function dispatch(error) {
							if (error) throw error;
							var onDispatchingCompleted = this;
							
							Step(
								function before() {
									instance.emitter.emit("dispatch_loop:before", [request, response], this);
								},
								function doDispatching(error) {
									if (error) throw error;
									mDispatcher.dispatch(request, response, this);
								},
								function after(error) {
									if (error) throw error;
									instance.emitter.emit("dispatch_loop:after", [request, response], onDispatchingCompleted);
								}
							);
						},
						function sendResponse(error) {
							if (error) {
								logger.error(error);
								response.write(error.message);
							}

							response.end();
							this();
						}
					);
				}

				// wait for all request data to be received. 
				// so post data / files are avaible when handling the request.
				if (!request.isDataReceived()) { 
					request.on("request:data_received", function() {	
						handleRequest();
					});
				}
				else {
					handleRequest();
				}
			}
		);
	}
	
	Step(
		function initialize() {
			instance.config = Config(Path.join(localPath, "application/config/production"));
			instance.plugins = PluginBroker(instance);
			mRouter = Router.create(instance);
			mDispatcher = Dispatcher.create(instance);
			mStaticContentProvider = StaticProvider.create();
			instance.httpServer = Http.createServer(onHttpRequestReceived);
			
			if (instance.config.get('system.webSocketsEnabled', false)) {
				instance.socketIO = SocketIO.listen(instance.httpServer);
			}
		
			instance.config.set('system.localPath', localPath);
			this();
		},
		function bootstrap(error) {
			if (error) throw error;
			var callback = this;
			
			// bootstrap modules.
			if (instance.config.get('system.modulesEnabled', false)) {
				var modulesPath = Path.join(localPath, 'application/modules/');
					Bootstrap.modules(modulesPath, function(error) {
						callback(error);
					});
			}
			else {
				callback();
			}
		},
		function startServer(error) {
			if (error) throw error;
			instance.httpServer.listen(8123);
		}
	);
	
	return instance;
};