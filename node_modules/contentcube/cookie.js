/**
 * Turns a cookie request header into a name-value map.
 * @param {String} header -value of the "Cookie" header.
 * @return {Object} 
 */
exports.parse = function(header) {
	var rawCookies = header.split(";");
	var cookies = {};
	
	rawCookies.forEach(function(rawCookie) {
		rawCookie = rawCookie.trim();
		var segments = rawCookie.split("=");
		var name = segments[0];
		var value = segments[1];
		
		cookies[name] = value;
	});
	
	return cookies;
};

/**
 * Turns a Set-Cookie header into a javascript object.
 * example:  
 * 	   value: `username=mads lee jensen; expires=Tue, 14 Jun 2011 11:54:54 GMT; domain:domain.com; path=/
 * 	   returns:
 *     {   
 *			name: 'username',
 *			value: 'mads lee jensen',
 *			expires: 'Tue, 14 Jun 2011 11:54:54 GMT',
 *			domain: 'domain.com',
 *			path: '/'
 *	   }
 * @param {String} value
 * @return {Object}
 */ 
exports.parseSetCookieString = function(value) {
	var result = {};
	var parts = value.split(";");
	var nameValue = parts.shift().split("=");
	
	result.name = nameValue[0];
	result.value = nameValue[1];
	
	parts.forEach(function(part) {
		var nameValue = part.split("=");
		var name = nameValue[0];
		var value;
		
		if (nameValue.length < 2) {
			value = true;
		}
		else {
			value = nameValue[1];
		}
	
		result[name] = value;
	});
	
	return result;
};

/**
 * Generate a cookie string to be used in a `Set-Cookie` response header.
 * @param {String} name
 * @param {String} value
 * @param {Integer} lifetime -in seconds, if lifetime == null then a browser session will be created, if lifetime less than `0` then it will remove existing cookie.
 * @param {String} domain
 * @param {String} path 
 */
exports.encodeSetCookieHeader = function(name, value, lifetime, domain, path) {
	var cookie = [name + "=" + value];
	
	if (lifetime) {
		var expires;
		
		if (lifetime < 0) { // means client requested the cookie to be deleted.
			expires = new Date(1970, 1, 1);
		}
		else {
			expires = new Date();
			expires.setSeconds(expires.getSeconds() + lifetime);	
		}
		
		cookie.push("expires=" + expires.toUTCString());
	}
	
	if (domain) {
		cookie.push("domain=" + domain);
	}
	
	if (path) {
		cookie.push("path=" + path);
	}
	
	var header = cookie.join("; ");
	return header;
};
