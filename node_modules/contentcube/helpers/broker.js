var ejs = require("ejs");
var fileSystem = require("fs");
var path = require("path");

module.exports = function(request) {
	var instance = {};
	
	/**
	 * Getter / Setter for placeholders.
	 * @param {String} key
	 * @return {Object}
	 */
	instance.placeholder = function(key) {	
		var placeholder = request.placeholder(key);
		
		return {
			get: function(key, defaultValue) {
				if (!key) {
					return placeholder;
				}
				
				return placeholder[key] || defaultValue;
			},
			set: function(key, value) {
				placeholder[key] = value;
			}
		};
	};
	
	/**
	 * Render and a view, notice this is a blocking call.
	 * @param {String} viewName
	 * @param {Object} viewData
	 * @return {String}
	 */
	instance.renderView = function(viewName, viewData) {
		var filepath = path.resolve('./application/views/' + viewName);
		var fileContent = fileSystem.readFileSync(filepath, 'UTF8');
		viewData._helpers = instance;
		var html = ejs.render(fileContent, {locals: viewData});
		
		return html;
	};
	
	/**
	 * Wrapper around a placeholder to store data related to rendering the layout.
	 */
	instance.layout = (function() {
		var placeholder = instance.placeholder('_layout');
			placeholder.scripts = [];
			placeholder.styles = [];
		
		var layoutHelper = {
			title: '',
			
			addScript: function(url) {
				if (placeholder.scripts.indexOf(url) == -1) {
					placeholder.scripts.push(url);
				}
			},
			getScripts: function() {
				var html = [];
				placeholder.scripts.forEach(function(url) {
					html.push('<script type="text/javascript" src="' + url + '"></script>');
				});
				
				return html.join("\n");
			},
			addStyle: function(url) {
				if (placeholder.styles.indexOf(url) == -1) {
					placeholder.styles.push(url);
				}
			},
			getStyles: function() {
				var html = [];
				placeholder.styles.forEach(function(url) {
					html.push('<link rel="stylesheet" type="text/css" href="' + url + '" media="all" />');
				});
				
				return html.join("\n");
			}
		};
		
		return layoutHelper;
	})();
	
	return instance;
};